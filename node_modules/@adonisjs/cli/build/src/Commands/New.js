"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ace_1 = require("@adonisjs/ace");
const Installer_1 = require("../Services/Installer");
const logger_1 = require("../Services/logger");
const helpers_1 = require("../Services/helpers");
class NewApp extends ace_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.projectRoot = process.cwd();
    }
    async handle() {
        if (!helpers_1.satisfiesNodeVersion()) {
            const message = [
                `Unsatisfied Node.js version ${process.version}`,
                'Please update Node.js to {10.15.3} before you continue',
            ];
            this.$error(message.join(' '));
            return;
        }
        logger_1.dumpAsciiLogo();
        const installer = new Installer_1.Installer(this.projectRoot, this.yarn ? 'yarn' : 'npm', false);
        const flags = this.apiOnly ? ['--boilerplate', 'api'] : ['--boilerplate', 'web'];
        installer.createApp(this.name, flags);
    }
}
NewApp.commandName = 'new';
NewApp.description = 'Scaffold a new application';
__decorate([
    ace_1.flags.boolean({ description: 'Use yarn instead of npm for installing dependencies' }),
    __metadata("design:type", Boolean)
], NewApp.prototype, "yarn", void 0);
__decorate([
    ace_1.args.string({ description: 'The name/path of the project directory' }),
    __metadata("design:type", String)
], NewApp.prototype, "name", void 0);
__decorate([
    ace_1.flags.boolean({ description: 'Create project for REST API server' }),
    __metadata("design:type", Boolean)
], NewApp.prototype, "apiOnly", void 0);
exports.default = NewApp;
