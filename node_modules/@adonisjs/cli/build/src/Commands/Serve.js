"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ace_1 = require("@adonisjs/ace");
const Compiler_1 = require("../Services/Compiler");
const helpers_1 = require("../Services/helpers");
class Serve extends ace_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.projectRoot = process.cwd();
    }
    async handle() {
        const rcContents = await helpers_1.getRcContents(this.projectRoot);
        if (!rcContents) {
            this.$error('Make sure your project root has .adonisrc.json file to continue');
            return;
        }
        const compiler = new Compiler_1.Compiler(this, this.projectRoot, rcContents, this.nodeArgs);
        try {
            if (this.dev) {
                await compiler.watch();
            }
            else {
                await compiler.build(true);
            }
        }
        catch (error) {
            this.$error(error.message);
            console.error(error.stack);
        }
    }
}
Serve.commandName = 'serve';
Serve.description = 'Start HTTP server for development';
__decorate([
    ace_1.flags.boolean({ description: 'Watch for file changes' }),
    __metadata("design:type", Boolean)
], Serve.prototype, "dev", void 0);
__decorate([
    ace_1.flags.array({ description: 'Pass arguments to the node command' }),
    __metadata("design:type", Array)
], Serve.prototype, "nodeArgs", void 0);
exports.default = Serve;
