"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const execa_1 = __importDefault(require("execa"));
const helpers_1 = require("./helpers");
class HttpServer {
    constructor(_sourceFile, _projectRoot, _nodeArgs = []) {
        this._sourceFile = _sourceFile;
        this._projectRoot = _projectRoot;
        this._nodeArgs = _nodeArgs;
    }
    get isConnected() {
        return this._httpServer && this._httpServer.connected && !this._httpServer.killed;
    }
    start() {
        if (this.isConnected) {
            throw new Error('Http server is already connected. Call restart instead');
        }
        this._httpServer = execa_1.default.node(this._sourceFile, [], {
            buffer: false,
            cwd: this._projectRoot,
            env: helpers_1.getChildProcessEnvVariables(this._projectRoot),
            nodeOptions: this._nodeArgs,
        });
        this._httpServer.stdout.pipe(process.stdout);
        this._httpServer.stderr.pipe(process.stderr);
    }
    restart() {
        if (this._httpServer) {
            this._httpServer.kill('SIGKILL');
        }
        this.start();
    }
}
exports.HttpServer = HttpServer;
