"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const change_case_1 = require("change-case");
const sink_1 = require("@adonisjs/sink");
const path_1 = require("path");
const logger_1 = require("./logger");
const BASE_TEMPLATES_DIR = path_1.join(__dirname, '..', '..', 'templates');
class ResourceBuilder {
    constructor(_projectRoot, inputName, resource) {
        this._projectRoot = _projectRoot;
        const name = change_case_1.pascalCase(path_1.basename(inputName));
        this._resourceName = resource ? this._addResourceSuffix(name, resource) : name;
        this._fileName = `${this._resourceName}.ts`;
        this._basedir = path_1.dirname(inputName);
    }
    _addResourceSuffix(name, resource) {
        return `${name.replace(new RegExp(`${resource.toLowerCase()}$`, 'i'), '')}${resource}`;
    }
    destinationPath(location) {
        this._location = location;
        return this;
    }
    useTemplate(template, data) {
        this._template = path_1.join(BASE_TEMPLATES_DIR, template);
        this._data = data;
        return this;
    }
    setFileName(name) {
        this._fileName = name;
        return this;
    }
    setResourceName(name) {
        this._resourceName = name;
        return this;
    }
    async make() {
        const destinationDir = path_1.join(this._projectRoot, this._location, this._basedir);
        const fileNameForLogs = path_1.join(this._basedir, this._location, this._fileName);
        await fs_extra_1.ensureDir(destinationDir);
        const resource = new sink_1.TemplateFile(destinationDir, this._fileName, this._template);
        if (resource.exists()) {
            logger_1.logError(`${fileNameForLogs} file already exists`);
            return;
        }
        resource
            .apply(Object.assign(this._data, { resourceName: this._resourceName }))
            .commit();
        logger_1.logCreateAction(fileNameForLogs);
    }
}
exports.ResourceBuilder = ResourceBuilder;
