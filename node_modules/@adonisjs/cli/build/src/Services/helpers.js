"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const semver_1 = __importDefault(require("semver"));
const fs_extra_1 = require("fs-extra");
const standalone_1 = require("@adonisjs/application/build/standalone");
function satisfiesNodeVersion() {
    const version = process.version;
    const parsedVersion = semver_1.default.parse(version);
    return !!(parsedVersion && parsedVersion.major >= 10);
}
exports.satisfiesNodeVersion = satisfiesNodeVersion;
function getAdonisCoreVersion(cwd) {
    try {
        const pkgPath = require.resolve('@adonisjs/core/package.json', {
            paths: [cwd],
        });
        return require(pkgPath).version;
    }
    catch (error) {
        return null;
    }
}
exports.getAdonisCoreVersion = getAdonisCoreVersion;
function getCliVersion() {
    try {
        return require(path_1.join(__dirname, '..', '..', '..', 'package.json')).version;
    }
    catch (error) {
        return null;
    }
}
exports.getCliVersion = getCliVersion;
function getChildProcessEnvVariables(cwd) {
    return {
        FORCE_COLOR: 'true',
        ADONIS_CLI: 'true',
        ADONIS_CLI_VERSION: getCliVersion() || 'NA',
        ADONIS_CLI_CWD: cwd,
    };
}
exports.getChildProcessEnvVariables = getChildProcessEnvVariables;
async function getRcContents(projectRoot) {
    const filePath = path_1.join(projectRoot, '.adonisrc.json');
    const hasRcFile = await fs_extra_1.pathExists(filePath);
    if (!hasRcFile) {
        return null;
    }
    return standalone_1.rcParser.parse(require(filePath));
}
exports.getRcContents = getRcContents;
