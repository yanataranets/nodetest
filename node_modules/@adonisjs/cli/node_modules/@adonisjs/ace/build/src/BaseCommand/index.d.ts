import { ParsedOptions } from 'getopts';
import { Logger } from '@poppinss/fancy-logs';
import { Colors } from '@poppinss/colors';
import { Prompt, FakePrompt } from '@poppinss/prompts';
import { ApplicationContract } from '@ioc:Adonis/Core/Application';
import { Generator } from '../Generator';
import { CommandArg, CommandFlag, KernelContract, CommandContract } from '../Contracts';
/**
 * Abstract base class other classes must extend
 */
export declare abstract class BaseCommand implements CommandContract {
    application: ApplicationContract;
    kernel: KernelContract;
    /**
     * Accepting AdonisJs application instance and kernel instance
     */
    constructor(application: ApplicationContract, kernel: KernelContract);
    /**
     * Command arguments
     */
    static args: CommandArg[];
    /**
     * Command flags
     */
    static flags: CommandFlag[];
    /**
     * Command name. The command will be registered using this name only. Make
     * sure their aren't any spaces inside the command name.
     */
    static commandName: string;
    /**
     * The description of the command displayed on the help screen.
     * A good command will always have some description.
     */
    static description: string;
    /**
     * Any settings a command wants to have. Helpful for third party
     * tools to read the settings in lifecycle hooks and make
     * certain decisions
     */
    static settings: any;
    /**
     * Whether or not the command has been booted
     */
    static booted: boolean;
    /**
     * Boots the command by defining required static properties
     */
    static boot(): void;
    /**
     * Define an argument directly on the command without using the decorator
     */
    static $addArgument(options: Partial<CommandArg>): void;
    /**
     * Define a flag directly on the command without using the decorator
     */
    static $addFlag(options: Partial<CommandFlag>): void;
    /**
     * Parsed options on the command. They only exist when the command
     * is executed via kernel.
     */
    parsed?: ParsedOptions;
    /**
     * The prompt for the command
     */
    prompt: Prompt | FakePrompt;
    /**
     * Returns the instance of logger to log messages
     */
    logger: Logger;
    /**
     * Generator instance to generate entity files
     */
    generator: Generator;
    /**
     * Returns a new instance of colors class. If application is in test mode
     * hen it will return an instance of [[Stringify]] which has consistent
     * output tailored for testing, otherwise an instance of [[Kleur]] is
     * returned.
     */
    get colors(): Colors;
    /**
     * Must be defined by the parent class
     */
    abstract handle(...args: any[]): Promise<void>;
}
