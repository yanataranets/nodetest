"use strict";
/*
 * @adonisjs/ace
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCommand = void 0;
const utils_1 = require("@poppinss/utils");
const fancy_logs_1 = require("@poppinss/fancy-logs");
const colors_1 = require("@poppinss/colors");
const prompts_1 = require("@poppinss/prompts");
const Generator_1 = require("../Generator");
/**
 * Abstract base class other classes must extend
 */
class BaseCommand {
    /**
     * Accepting AdonisJs application instance and kernel instance
     */
    constructor(application, kernel) {
        this.application = application;
        this.kernel = kernel;
        /**
         * The prompt for the command
         */
        this.prompt = this.application.environment === 'test' ? new prompts_1.FakePrompt() : new prompts_1.Prompt();
        /**
         * Returns the instance of logger to log messages
         */
        this.logger = new fancy_logs_1.Logger({ fake: this.application.environment === 'test' });
        /**
         * Generator instance to generate entity files
         */
        this.generator = new Generator_1.Generator(this.logger);
    }
    /**
     * Boots the command by defining required static properties
     */
    static boot() {
        if (this.booted) {
            return;
        }
        this.booted = true;
        Object.defineProperty(this, 'args', { value: [] });
        Object.defineProperty(this, 'flags', { value: [] });
        if (!this.hasOwnProperty('settings')) {
            Object.defineProperty(this, 'settings', { value: {} });
        }
        if (!this.hasOwnProperty('commandName')) {
            Object.defineProperty(this, 'commandName', { value: '' });
        }
        if (!this.hasOwnProperty('description')) {
            Object.defineProperty(this, 'description', { value: '' });
        }
    }
    /**
     * Define an argument directly on the command without using the decorator
     */
    static $addArgument(options) {
        if (!options.propertyName) {
            throw new Error('"propertyName" is required to register command argument');
        }
        const arg = Object.assign({
            type: options.type || 'string',
            propertyName: options.propertyName,
            name: options.name || options.propertyName,
            required: options.required === false ? false : true,
        }, options);
        this.args.push(arg);
    }
    /**
     * Define a flag directly on the command without using the decorator
     */
    static $addFlag(options) {
        if (!options.propertyName) {
            throw new Error('"propertyName" is required to register command flag');
        }
        const flag = Object.assign({
            name: options.name || utils_1.lodash.snakeCase(options.propertyName).replace(/_/g, '-'),
            propertyName: options.propertyName,
            type: options.type || 'boolean',
        }, options);
        this.flags.push(flag);
    }
    /**
     * Returns a new instance of colors class. If application is in test mode
     * hen it will return an instance of [[Stringify]] which has consistent
     * output tailored for testing, otherwise an instance of [[Kleur]] is
     * returned.
     */
    get colors() {
        return (this.application.environment === 'test' ? new colors_1.FakeColors() : new colors_1.Colors());
    }
}
exports.BaseCommand = BaseCommand;
