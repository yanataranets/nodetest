import { ManifestNode, CommandConstructorContract, ManifestContract } from '../Contracts';
/**
 * Manifest class drastically improves the commands performance, by generating
 * a manifest file for all the commands and lazy load only the executed
 * command.
 */
export declare class Manifest implements ManifestContract {
    private basePath;
    constructor(basePath: string);
    /**
     * Write file to the disk
     */
    private writeManifest;
    /**
     * Loads a single command from the manifest commands list.
     */
    loadCommand(commandPath: string): {
        command: CommandConstructorContract;
        commandPath: string;
    };
    /**
     * Look up commands from a given path. The modules can also return an array
     * of sub-paths from where to load additional commands.
     */
    lookupCommands(commandPath: string): {
        command: CommandConstructorContract;
        commandPath: string;
    }[];
    /**
     * Generates the manifest file for the given command paths
     */
    generate(commandPaths: string[]): Promise<void>;
    /**
     * Load the manifest file from the disk. An exception is raised
     * when `manifest` file is missing. So the consumer must ensure
     * that file exists before calling this method.
     */
    load(): Promise<ManifestNode>;
}
