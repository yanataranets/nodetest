import getopts from 'getopts';
import { CommandFlag, GlobalFlagHandler, CommandConstructorContract, CommandArg } from '../Contracts';
/**
 * The job of the parser is to parse the command line values by taking
 * the command `args`, `flags` and `globalFlags` into account.
 */
export declare class Parser {
    private registeredFlags;
    constructor(registeredFlags: {
        [name: string]: CommandFlag & {
            handler: GlobalFlagHandler;
        };
    });
    /**
     * Processes ace command flag to set the options for `getopts`.
     */
    private preProcessFlag;
    /**
     * Casts value of a flag to it's expected data type. These values
     * are then later validated to ensure that casting was successful.
     */
    castFlag(flag: CommandFlag, parsed: getopts.ParsedOptions): void;
    /**
     * Validating the flag to ensure that it's valid as per the
     * desired data type.
     */
    validateFlag(flag: CommandFlag, parsed: getopts.ParsedOptions, command?: CommandConstructorContract): void;
    /**
     * Validates the value to ensure that values are defined for
     * required arguments.
     */
    validateArg(arg: CommandArg, index: number, parsed: getopts.ParsedOptions, command: CommandConstructorContract): void;
    /**
     * Parses argv and executes the command and global flags handlers
     */
    parse(argv: string[], command?: CommandConstructorContract): getopts.ParsedOptions;
}
