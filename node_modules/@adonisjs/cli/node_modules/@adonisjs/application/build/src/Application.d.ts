/// <reference path="../adonis-typings/application.d.ts" />
import { RcFile, SemverNode, PreloadNode, ApplicationContract } from '@ioc:Adonis/Core/Application';
import { IocContract } from '@adonisjs/fold';
/**
 * The main application instance to know about the environment, filesystem
 * in which your AdonisJs app is running
 */
export declare class Application implements ApplicationContract {
    readonly appRoot: string;
    container: IocContract;
    /**
     * A boolean to know if application has bootstrapped successfully
     */
    isReady: boolean;
    /**
     * Current working directory for the CLI and not the build directory
     * The `ADONIS_CLI_CWD` is set by the cli
     */
    readonly cliCwd?: string;
    /**
     * A boolean to know if application has received a shutdown signal
     * like `SIGINT` or `SIGTERM`.
     */
    isShuttingDown: boolean;
    /**
     * Is current environment production.
     */
    inProduction: boolean;
    /**
     * Inverse of `inProduction`
     */
    inDev: boolean;
    /**
     * The environment in which application is running
     */
    environment: 'web' | 'console' | 'test' | 'unknown';
    /**
     * The name of the application picked from `.adonisrc.json` file. This can
     * be used to prefix logs.
     */
    readonly appName: string;
    /**
     * The namespace of exception handler that will handle exceptions
     */
    exceptionHandlerNamespace: string;
    /**
     * A array of files to be preloaded
     */
    preloads: PreloadNode[];
    /**
     * A map of pre-configured directories
     */
    directoriesMap: Map<(string), string>;
    /**
     * A map of directories aliases
     */
    aliasesMap: Map<string, string>;
    /**
     * A map of namespaces that different parts of apps
     * can use
     */
    namespacesMap: Map<string, string>;
    /**
     * The application version. Again picked from `.adonisrc.json` file
     */
    readonly version: SemverNode | null;
    /**
     * `@adonisjs/core` version
     */
    readonly adonisVersion: SemverNode | null;
    /**
     * Reference to fully parser rcFile
     */
    readonly rcFile: RcFile;
    /**
     * The typescript flag indicates a couple of things, which can help tweak the tooling
     * and runtime behavior of the application as well.
     *
     * 1. When `typescript=true`, it means that the project is written using typescript.
     * 2. After compiling to Javascript, AdonisJs will set this value to `false` in the build folder.
     * 3. At runtime when `typescript=true`, it means the app is using ts-node to start.
     */
    readonly typescript: boolean;
    constructor(appRoot: string, container: IocContract, rcContents: {
        [key: string]: any;
    }, pkgFile: Partial<{
        name: string;
        version: string;
        adonisVersion: string;
    } & {
        [key: string]: any;
    }>);
    /**
     * Parses version string to an object.
     */
    private parseVersion;
    /**
     * Sets env variables based upon the provided application info.
     */
    private setEnvVars;
    /**
     * Returns path for a given namespace by replacing the base namespace
     * with the defined directories map inside the rc file.
     */
    resolveNamespaceDirectory(namespaceFor: string): string | null;
    /**
     * Make path to a file or directory relative from
     * the application path
     */
    makePath(...paths: string[]): string;
    /**
     * Makes the path to a directory from `cliCwd` vs the `appRoot`. This is
     * helpful when we want path inside the project root and not the
     * build directory
     */
    makePathFromCwd(...paths: string[]): string;
    /**
     * Make path to a file or directory relative from
     * the config directory
     */
    configPath(...paths: string[]): string;
    /**
     * Make path to a file or directory relative from
     * the public path
     */
    publicPath(...paths: string[]): string;
    /**
     * Make path to a file or directory relative from
     * the database path
     */
    databasePath(...paths: string[]): string;
    /**
     * Make path to a file or directory relative from
     * the migrations path
     */
    migrationsPath(...paths: string[]): string;
    /**
     * Make path to a file or directory relative from
     * the seeds path
     */
    seedsPath(...paths: string[]): string;
    /**
     * Make path to a file or directory relative from
     * the resources path
     */
    resourcesPath(...paths: string[]): string;
    /**
     * Make path to a file or directory relative from
     * the views path
     */
    viewsPath(...paths: string[]): string;
    /**
     * Makes path to the start directory
     */
    startPath(...paths: string[]): string;
    /**
     * Makes path to the tmp directory. Since the tmp path is used for
     * writing at the runtime, we use `cwd` path to the write to the
     * source and not the build directory.
     */
    tmpPath(...paths: string[]): string;
    /**
     * Serialized output
     */
    toJSON(): {
        isReady: boolean;
        isShuttingDown: boolean;
        environment: "web" | "console" | "test" | "unknown";
        nodeEnvironment: string;
        appName: string;
        version: string | null;
        adonisVersion: string | null;
    };
}
