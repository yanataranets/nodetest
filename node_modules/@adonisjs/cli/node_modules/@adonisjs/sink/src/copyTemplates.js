"use strict";
/*
 * @adonisjs/sink
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const colors_1 = require("@poppinss/colors");
const path_1 = require("path");
const logger_1 = require("./logger");
const DotTemplate_1 = require("./formats/DotTemplate");
const TemplateFile_1 = require("./formats/TemplateFile");
const colors = new colors_1.Colors();
/**
 * Normalizes the template node
 */
function normalizeTemplateNode(templateNode) {
    templateNode = typeof (templateNode) === 'string' ? {
        src: templateNode,
        dest: templateNode.replace(new RegExp(`${path_1.extname(templateNode)}$`), ''),
        dotSyntax: false,
        data: {},
    } : templateNode;
    templateNode.dest = path_1.extname(templateNode.dest) === '' ? `${templateNode.dest}.ts` : templateNode.dest;
    return templateNode;
}
/**
 * Copy multiple templates to the user project.
 */
function copyTemplates(projectRoot, application, templatesBasePath, templates) {
    Object.keys(templates).forEach((templateFor) => {
        /**
         * Ignore the `basePath` key used for resolving the basePath of
         * templates
         */
        if (templateFor === 'basePath') {
            return;
        }
        /**
         * The directory configured inside `.adonisrc.json` file for the
         * given template type
         */
        const configuredDirectory = application.directoriesMap.get(templateFor);
        /**
         * Warn when template for unknown directory type is defined
         */
        if (!configuredDirectory) {
            logger_1.logger.error({
                message: `Unknown directory type ${colors.underline(templateFor)}`,
                icon: true,
            });
            return;
        }
        const templatesToCopy = Array.isArray(templates[templateFor])
            ? templates[templateFor]
            : [templates[templateFor]];
        templatesToCopy.map(normalizeTemplateNode).forEach(({ src, dest, dotSyntax, data }) => {
            if (!src || !dest) {
                throw new Error('src and dest are required when copying templates');
            }
            const sourcePath = path_1.join(templatesBasePath, src);
            const destinationPath = path_1.normalize(`${configuredDirectory}/${dest}`);
            const template = dotSyntax
                ? new DotTemplate_1.DotTemplate(projectRoot, destinationPath, sourcePath)
                : new TemplateFile_1.TemplateFile(projectRoot, destinationPath, sourcePath);
            /**
             * Skip when file already exists
             */
            if (template.exists()) {
                logger_1.logger.skip(destinationPath);
                return;
            }
            template.apply(data || {}).commit();
            logger_1.logger.create(destinationPath);
        });
    });
}
exports.copyTemplates = copyTemplates;
