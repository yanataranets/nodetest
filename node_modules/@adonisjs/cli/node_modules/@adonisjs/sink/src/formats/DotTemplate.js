"use strict";
/*
 * @adonisjs/sink
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dot_1 = __importDefault(require("dot"));
const mrm_core_1 = require("mrm-core");
const fs_1 = require("fs");
const BaseFile_1 = require("../base/BaseFile");
/**
 * Exposes the API to generate source files from template files.
 */
class DotTemplate extends BaseFile_1.BaseFile {
    constructor(basePath, filename, templatePath) {
        super(basePath);
        this.templatePath = templatePath;
        this.templateData = {};
        this.whitespace = true;
        this.$actions = [];
        this.removeOnRollback = true;
        this.overwrite = false;
        this.$cdIn();
        this.filePointer = mrm_core_1.file(filename);
        this.$cdOut();
    }
    /**
     * Returns the contents of the template file
     */
    readTemplate() {
        try {
            return fs_1.readFileSync(this.templatePath, 'utf8');
        }
        catch (err) {
            if (err.code === 'ENOENT') {
                throw Error(`Template file not found: ${this.templatePath}`);
            }
            else {
                throw err;
            }
        }
    }
    /**
     * Returns existing contents for a template file
     */
    get() {
        return this.filePointer.get();
    }
    /**
     * A boolean telling if the file already exists
     */
    exists() {
        return this.filePointer.exists();
    }
    /**
     * Apply contents to the template to evaluate it's output
     */
    apply(contents) {
        this.templateData = contents || {};
        return this;
    }
    /**
     * Control whether or not to render whitespace. It is enabled by
     * default
     */
    renderWhitespace(whitespaceFlag) {
        this.whitespace = whitespaceFlag;
        return this;
    }
    /**
     * Commit changes
     */
    commit() {
        this.$cdIn();
        /**
         * Do not overwrite contents when file already exists and
         * `overwrite = false`
         */
        if (this.filePointer.exists() && !this.overwrite) {
            this.$cdOut();
            return;
        }
        try {
            const templateFn = dot_1.default.template(this.readTemplate(), Object.assign({}, dot_1.default.templateSettings, {
                strip: !this.whitespace,
            }));
            this.filePointer.save(templateFn(this.templateData));
            this.$cdOut();
        }
        catch (error) {
            this.$cdOut();
            throw error;
        }
    }
    /**
     * Rollback changes
     */
    rollback() {
        this.$cdIn();
        /**
         * Remove the file on rollback (only when instructed) or this method results
         * is a noop
         */
        if (this.filePointer.exists() && this.removeOnRollback) {
            this.filePointer.delete();
        }
        this.$cdOut();
    }
}
exports.DotTemplate = DotTemplate;
