/// <reference types="node" />
import chokidar from 'chokidar';
import tsStatic from 'typescript';
import { EventEmitter } from 'events';
declare type PluginFn = (ts: typeof tsStatic, config: tsStatic.CompilerOptions) => tsStatic.TransformerFactory<tsStatic.SourceFile> | tsStatic.CustomTransformerFactory;
export declare class TypescriptCompiler extends EventEmitter {
    ts: typeof tsStatic;
    private _configPath;
    private _cwd;
    watcher?: chokidar.FSWatcher;
    host: tsStatic.CompilerHost;
    private _sourceFiles;
    private _includePatterns;
    private _excludePatterns;
    private _languageService;
    private _transformers;
    private _plugins;
    private _ignoredSourceFiles;
    constructor(ts: typeof tsStatic, _configPath: string, _cwd: string);
    private _buildProject;
    private _loadConfig;
    private _getServiceHost;
    private _createLanguageService;
    private _isTsFile;
    private _isIncludedInProjectFiles;
    private _isTsSourceFile;
    private _getFileErrors;
    private _processSourceFile;
    private _onChange;
    private _onRemove;
    private _onNewFile;
    on(event: 'watcher:ready', cb: () => void): this;
    on(event: 'add', cb: (filePath: string) => void): this;
    on(event: 'change', cb: (filePath: string) => void): this;
    on(event: 'unlink', cb: (filePath: string) => void): this;
    on(event: 'source:unlink', cb: (filePath: string) => void): this;
    on(event: 'initial:build', cb: (hasError: boolean, diagnostics: tsStatic.Diagnostic[]) => void): this;
    on(event: 'subsequent:build', cb: (filePath: string, hasError: boolean, diagnostics: tsStatic.Diagnostic[]) => void): this;
    on(event: string, cb: any): this;
    use(transformer: PluginFn, lifecycle: 'before' | 'after'): this;
    build(parsedConfig: tsStatic.ParsedCommandLine): boolean;
    parseConfig(compileOptionsToExtend?: tsStatic.CompilerOptions): {
        error?: tsStatic.Diagnostic;
        config?: tsStatic.ParsedCommandLine;
    };
    watch(parsedConfig: tsStatic.ParsedCommandLine, watchPattern?: string | string[], options?: chokidar.WatchOptions): void;
}
export {};
