"use strict";
/*
 * @poppinss/dev-utils
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Filesystem = void 0;
const os_1 = require("os");
const fs_extra_1 = __importDefault(require("fs-extra"));
const clear_module_1 = __importDefault(require("clear-module"));
const path_1 = require("path");
/**
 * Filesystem class exposes a consistent API to create, read and delete
 * files during tests. Apart from the generic CRUD operations, it
 * also takes care of the remove the modules from Node.js cache.
 *
 * ```js
 * const fs = new Filesystem()
 *
 * await fs.add('routes.js', `module.exports = 'routes'`)
 * await fs.remove('routes.js') // clears require cache
 *
 * // do it after every test to cleanup all generated files
 * await fs.cleanup()
 * ```
 */
class Filesystem {
    constructor(basePath = path_1.join(os_1.tmpdir(), `${new Date().getTime()}`)) {
        this.basePath = basePath;
        this.modules = new Set();
        /**
         * Reference to fsExtra
         */
        this.fsExtra = fs_extra_1.default;
    }
    /**
     * Returns a boolean telling if file extension is part
     * of a Node.js module
     */
    isModule(filePath) {
        return ['.js', '.ts', '.json'].includes(path_1.extname(filePath));
    }
    /**
     * Makes abs path to a given file
     */
    makePath(filePath) {
        return path_1.isAbsolute(filePath) ? filePath : path_1.join(this.basePath, filePath);
    }
    /**
     * Removes ext from the file path
     */
    dropExt(filePath) {
        return filePath.replace(/\.\w+$/, '');
    }
    /**
     * Removes the file path from nodejs module cache
     */
    removeFromModulesCache(filePath) {
        const absPath = this.makePath(filePath);
        this.modules.delete(absPath);
        /**
         * Clear module raises error if file is not
         * in require cache, we can safely ignore
         * the error
         */
        try {
            clear_module_1.default(absPath);
        }
        catch (error) { }
        delete require.cache[absPath];
    }
    /**
     * Store reference of a given file to clear it from the
     * modules cache at a later stage
     */
    trackModule(filePath) {
        if (!this.isModule(filePath)) {
            return;
        }
        this.modules.add(this.makePath(filePath));
    }
    /**
     * Add a new file with given contents
     */
    async add(filePath, contents) {
        const absPath = this.makePath(filePath);
        await this.fsExtra.outputFile(absPath, contents);
        this.trackModule(filePath);
    }
    /**
     * Returns true when file exists on the disk
     */
    async exists(filePath) {
        return this.fsExtra.pathExists(this.makePath(filePath));
    }
    /**
     * Creates base path dir (if missing)
     */
    async ensureRoot() {
        return this.fsExtra.ensureDir(this.basePath);
    }
    /**
     * Returns file contents
     */
    async get(filePath) {
        return this.fsExtra.readFile(this.makePath(filePath), 'utf-8');
    }
    /**
     * Remove file
     */
    async remove(filePath) {
        const absPath = this.makePath(filePath);
        await this.fsExtra.remove(absPath);
        const withoutExt = this.dropExt(absPath);
        if (this.modules.has(absPath) || this.modules.has(withoutExt)) {
            this.removeFromModulesCache(filePath);
            this.removeFromModulesCache(withoutExt);
            return;
        }
    }
    /**
     * Cleanup all files and modules cache (if any)
     */
    async cleanup() {
        await this.fsExtra.remove(this.basePath);
        this.modules.forEach((mod) => {
            this.removeFromModulesCache(mod);
            this.removeFromModulesCache(this.dropExt(mod));
        });
    }
}
exports.Filesystem = Filesystem;
