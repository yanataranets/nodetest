import { ActionsList, MessageNode, DeferredMessageNode } from './contracts';
/**
 * Logger exposes the API to print fancy logs to the console.
 */
export declare class Logger {
    private baseOptions?;
    /**
     * List of actions that can be logged using the logger
     */
    actions: ActionsList;
    /**
     * Reference to colors, fake colors are used when `fake` is
     * set to true
     */
    private colors;
    /**
     * Array of logs collected when logger was paused. Helps in
     * collecting logs and then filtering them during resume.
     */
    private deferredLogs;
    /**
     * Is logger paused from printing logs
     */
    private isPaused;
    /**
     * Length of the biggest label to keep all log messages
     * justified
     */
    private biggestLabel;
    /**
     * An array of logs collected only when `fake` is set
     * to true
     */
    logs: string[];
    constructor(baseOptions?: (Partial<MessageNode> & {
        fake?: boolean | undefined;
    }) | undefined);
    /**
     * Configures the logger
     */
    private configure;
    /**
     * Computes the length of the biggest label including it's icon. Required
     * to justify content
     */
    private computeBiggestLabel;
    private serializeError;
    /**
     * Returns the base message node
     */
    private normalizeMessage;
    /**
     * Returns whitespace for a given length
     */
    private getWhitespace;
    /**
     * Returns the icon for a given action type
     */
    private getIcon;
    /**
     * Returns the label for a given action type
     */
    private getLabel;
    /**
     * Returns the prefix for the message
     */
    private getPrefix;
    /**
     * Returns the suffix for the message
     */
    private getSuffix;
    /**
     * Formats error message
     */
    private formatStack;
    /**
     * Invokes `console[logMethod]`, gives opportunity to overwrite the
     * method during extend
     */
    protected $log(logMethod: string, message: string, args: any[]): void;
    /**
     * Prints message node to the console
     */
    protected $printMessage(message: DeferredMessageNode): string | undefined;
    /**
     * Log message for a given action
     */
    log(name: keyof ActionsList, messageNode: string | Error | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print success message
     */
    success(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print error message
     */
    error(message: string | Error | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print fatal message
     */
    fatal(message: string | Error | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print info message
     */
    info(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print complete message
     */
    complete(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print pending message
     */
    pending(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print create message
     */
    create(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print update message
     */
    update(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print delete message
     */
    delete(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print watch message
     */
    watch(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print start message
     */
    start(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print stop message
     */
    stop(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print compile message
     */
    compile(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print skip message
     */
    skip(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Print skip message
     */
    warn(message: string | MessageNode, ...args: string[]): string | undefined;
    /**
     * Pause the logger and collect logs in memory
     */
    pauseLogger(): void;
    /**
     * Resume logger and pass a function to decide whether or not
     * to print the log
     */
    resumeLogger(filterFn?: (message: DeferredMessageNode) => boolean): void;
}
